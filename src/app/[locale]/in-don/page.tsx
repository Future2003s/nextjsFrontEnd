"use client"; // Required for Next.js 14+ App Router to use hooks

import React, { useState } from "react";

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho th√¥ng tin li√™n h·ªá v√† g√≥i h√†ng b·∫±ng TypeScript
// ---
// Define TypeScript interfaces for contact and package information
interface ContactInfo {
  hoTen: string;
  soDienThoai: string;
  diaChi: string;
}

interface PackageInfo {
  tenSanPham: string;
  soLuong: number;
  khoiLuong: number;
  tienThuHo: number;
  ghiChu: string;
}

// Component ch√≠nh c·ªßa ·ª©ng d·ª•ng
// ---
// Main App component
export default function ShippingLabelCreator() {
  // Kh·ªüi t·∫°o state cho th√¥ng tin ng∆∞·ªùi g·ª≠i, ng∆∞·ªùi nh·∫≠n v√† g√≥i h√†ng
  // ---
  // Initialize state for sender, receiver, and package information
  const [senderInfo, setSenderInfo] = useState<ContactInfo>({
    hoTen: "C·ª≠a H√†ng ABC",
    soDienThoai: "0987654321",
    diaChi: "123 ƒê∆∞·ªùng L√°ng, ƒê·ªëng ƒêa, H√† N·ªôi",
  });

  const [receiverInfo, setReceiverInfo] = useState<ContactInfo>({
    hoTen: "",
    soDienThoai: "",
    diaChi: "",
  });

  const [packageInfo, setPackageInfo] = useState<PackageInfo>({
    tenSanPham: "√Åo thun v√† Qu·∫ßn jean",
    soLuong: 2,
    khoiLuong: 0.5,
    tienThuHo: 0,
    ghiChu: "H√†ng d·ªÖ v·ª°, xin nh·∫π tay.",
  });

  // H√†m x·ª≠ l√Ω khi c√≥ thay ƒë·ªïi trong c√°c √¥ input
  // ---
  // Handler for input changes
  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
    setter: React.Dispatch<React.SetStateAction<any>>
  ) => {
    const { name, value, type } = e.target;
    // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã sang s·ªë n·∫øu input l√† type 'number'
    // ---
    // Convert value to number if the input type is 'number'
    const finalValue = type === "number" ? parseFloat(value) || 0 : value;
    setter((prevState: any) => ({
      ...prevState,
      [name]: finalValue,
    }));
  };

  // H√†m x·ª≠ l√Ω vi·ªác in ·∫•n
  // ---
  // Handler for printing
  const handlePrint = () => {
    window.print();
  };

  // H√†m ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá (VND)
  // ---
  // Function to format currency (VND)
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(amount);
  };

  return (
    <>
      {/* CSS T·ªëi ∆Øu H√≥a In ·∫§n
        - .no-print: ·∫®n c√°c th√†nh ph·∫ßn kh√¥ng c·∫ßn thi·∫øt khi in (form, n√∫t, header...).
        - .print-container: Reset l·∫°i position c·ªßa container ch·ª©a v·∫≠n ƒë∆°n ƒë·ªÉ tr√°nh l·ªói layout.
        - #label-preview: ƒê·ªãnh d·∫°ng l·∫°i v·∫≠n ƒë∆°n ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng tr√™n trang in.
      */}
      <style jsx global>{`
        @media print {
          /* ·∫®n c√°c ph·∫ßn t·ª≠ kh√¥ng mu·ªën in */
          .no-print {
            display: none !important;
          }

          /* [S·ª¨A L·ªñI] V√¥ hi·ªáu h√≥a position:sticky ƒë·ªÉ tr√°nh xung ƒë·ªôt layout khi in */
          .print-container {
            position: static !important;
          }

          /* ·∫®n t·∫•t c·∫£ m·ªçi th·ª© tr√™n trang */
          body * {
            visibility: hidden;
          }

          /* Ch·ªâ hi·ªÉn th·ªã khu v·ª±c v·∫≠n ƒë∆°n v√† n·ªôi dung b√™n trong n√≥ */
          #label-preview,
          #label-preview * {
            visibility: visible;
          }

          /* ƒê·ªãnh v·ªã l·∫°i v·∫≠n ƒë∆°n ƒë·ªÉ n√≥ chi·∫øm to√†n b·ªô trang in */
          #label-preview {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: auto;
            border: none !important;
            box-shadow: none !important;
            margin: 0;
            padding: 20px;
          }
        }
      `}</style>

      <div className="bg-gray-100 min-h-screen font-sans p-4 sm:p-6 lg:p-8">
        <div className="max-w-7xl mx-auto">
          <header className="text-center mb-8 no-print">
            <h1 className="text-3xl sm:text-4xl font-bold text-gray-800">
              T·∫°o V·∫≠n ƒê∆°n Giao H√†ng
            </h1>
            <p className="text-gray-600 mt-2">
              Nh·∫≠p th√¥ng tin v√†o bi·ªÉu m·∫´u b√™n d∆∞·ªõi v√† xem tr∆∞·ªõc v·∫≠n ƒë∆°n c·ªßa b·∫°n.
            </p>
          </header>

          <main className="grid grid-cols-1 lg:grid-cols-5 gap-8">
            {/* C·ªôt Form Nh·∫≠p Li·ªáu */}
            <div className="lg:col-span-3 bg-white p-6 sm:p-8 rounded-xl shadow-lg no-print">
              <form onSubmit={(e) => e.preventDefault()}>
                {/* Th√¥ng tin ng∆∞·ªùi g·ª≠i */}
                <div className="mb-8">
                  <h2 className="text-2xl font-semibold text-gray-700 border-b-2 border-gray-200 pb-2 mb-4">
                    üì¶ Th√¥ng Tin Ng∆∞·ªùi G·ª≠i
                  </h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label
                        htmlFor="senderName"
                        className="block text-sm font-medium text-gray-600 mb-1"
                      >
                        H·ªç v√† T√™n
                      </label>
                      <input
                        type="text"
                        id="senderName"
                        name="hoTen"
                        value={senderInfo.hoTen}
                        onChange={(e) => handleInputChange(e, setSenderInfo)}
                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 transition"
                      />
                    </div>
                    <div>
                      <label
                        htmlFor="senderPhone"
                        className="block text-sm font-medium text-gray-600 mb-1"
                      >
                        S·ªë ƒëi·ªán tho·∫°i
                      </label>
                      <input
                        type="tel"
                        id="senderPhone"
                        name="soDienThoai"
                        value={senderInfo.soDienThoai}
                        onChange={(e) => handleInputChange(e, setSenderInfo)}
                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 transition"
                      />
                    </div>
                    <div className="md:col-span-2">
                      <label
                        htmlFor="senderAddress"
                        className="block text-sm font-medium text-gray-600 mb-1"
                      >
                        ƒê·ªãa ch·ªâ l·∫•y h√†ng
                      </label>
                      <input
                        type="text"
                        id="senderAddress"
                        name="diaChi"
                        value={senderInfo.diaChi}
                        onChange={(e) => handleInputChange(e, setSenderInfo)}
                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 transition"
                      />
                    </div>
                  </div>
                </div>

                {/* Th√¥ng tin ng∆∞·ªùi nh·∫≠n */}
                <div className="mb-8">
                  <h2 className="text-2xl font-semibold text-gray-700 border-b-2 border-gray-200 pb-2 mb-4">
                    üè† Th√¥ng Tin Ng∆∞·ªùi Nh·∫≠n
                  </h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label
                        htmlFor="receiverName"
                        className="block text-sm font-medium text-gray-600 mb-1"
                      >
                        H·ªç v√† T√™n
                      </label>
                      <input
                        type="text"
                        id="receiverName"
                        name="hoTen"
                        placeholder="Nguy·ªÖn VƒÉn A"
                        value={receiverInfo.hoTen}
                        onChange={(e) => handleInputChange(e, setReceiverInfo)}
                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 transition"
                      />
                    </div>
                    <div>
                      <label
                        htmlFor="receiverPhone"
                        className="block text-sm font-medium text-gray-600 mb-1"
                      >
                        S·ªë ƒëi·ªán tho·∫°i
                      </label>
                      <input
                        type="tel"
                        id="receiverPhone"
                        name="soDienThoai"
                        placeholder="0123456789"
                        value={receiverInfo.soDienThoai}
                        onChange={(e) => handleInputChange(e, setReceiverInfo)}
                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 transition"
                      />
                    </div>
                    <div className="md:col-span-2">
                      <label
                        htmlFor="receiverAddress"
                        className="block text-sm font-medium text-gray-600 mb-1"
                      >
                        ƒê·ªãa ch·ªâ giao h√†ng
                      </label>
                      <input
                        type="text"
                        id="receiverAddress"
                        name="diaChi"
                        placeholder="S·ªë nh√†, ƒë∆∞·ªùng, ph∆∞·ªùng/x√£, qu·∫≠n/huy·ªán, t·ªânh/th√†nh ph·ªë"
                        value={receiverInfo.diaChi}
                        onChange={(e) => handleInputChange(e, setReceiverInfo)}
                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 transition"
                      />
                    </div>
                  </div>
                </div>

                {/* Th√¥ng tin g√≥i h√†ng */}
                <div>
                  <h2 className="text-2xl font-semibold text-gray-700 border-b-2 border-gray-200 pb-2 mb-4">
                    üìã Th√¥ng Tin G√≥i H√†ng
                  </h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="md:col-span-2">
                      <label
                        htmlFor="productName"
                        className="block text-sm font-medium text-gray-600 mb-1"
                      >
                        N·ªôi dung h√†ng h√≥a (ghi r√µ)
                      </label>
                      <input
                        type="text"
                        id="productName"
                        name="tenSanPham"
                        value={packageInfo.tenSanPham}
                        onChange={(e) => handleInputChange(e, setPackageInfo)}
                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 transition"
                      />
                    </div>
                    <div>
                      <label
                        htmlFor="quantity"
                        className="block text-sm font-medium text-gray-600 mb-1"
                      >
                        S·ªë l∆∞·ª£ng
                      </label>
                      <input
                        type="number"
                        id="quantity"
                        name="soLuong"
                        min="1"
                        value={packageInfo.soLuong}
                        onChange={(e) => handleInputChange(e, setPackageInfo)}
                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 transition"
                      />
                    </div>
                    <div>
                      <label
                        htmlFor="weight"
                        className="block text-sm font-medium text-gray-600 mb-1"
                      >
                        Kh·ªëi l∆∞·ª£ng (kg)
                      </label>
                      <input
                        type="number"
                        id="weight"
                        name="khoiLuong"
                        step="0.1"
                        min="0"
                        value={packageInfo.khoiLuong}
                        onChange={(e) => handleInputChange(e, setPackageInfo)}
                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 transition"
                      />
                    </div>
                    <div className="md:col-span-2">
                      <label
                        htmlFor="cod"
                        className="block text-sm font-medium text-gray-600 mb-1"
                      >
                        Ti·ªÅn thu h·ªô (COD - VND)
                      </label>
                      <input
                        type="number"
                        id="cod"
                        name="tienThuHo"
                        min="0"
                        value={packageInfo.tienThuHo}
                        onChange={(e) => handleInputChange(e, setPackageInfo)}
                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 transition"
                      />
                    </div>
                    <div className="md:col-span-2">
                      <label
                        htmlFor="notes"
                        className="block text-sm font-medium text-gray-600 mb-1"
                      >
                        Ghi ch√∫
                      </label>
                      <textarea
                        id="notes"
                        name="ghiChu"
                        rows={3}
                        value={packageInfo.ghiChu}
                        onChange={(e) => handleInputChange(e, setPackageInfo)}
                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 transition"
                      ></textarea>
                    </div>
                  </div>
                </div>
              </form>
            </div>

            {/* C·ªôt Xem Tr∆∞·ªõc V·∫≠n ƒê∆°n */}
            <div className="lg:col-span-2">
              {/* [S·ª¨A L·ªñI] Th√™m class 'print-container' v√†o ƒë√¢y */}
              <div className="sticky top-8 print-container">
                <div
                  id="label-preview"
                  className="bg-white p-6 rounded-xl shadow-lg border-2 border-dashed border-gray-400"
                >
                  <header className="flex justify-between items-center border-b-2 border-black pb-2">
                    <div>
                      <h3 className="font-bold text-xl">LALA-LYCHEEE</h3>
                      <p className="text-sm">Hotline: 0962-215-666</p>
                    </div>
                    <div className="text-right">LLLC123456789</div>
                  </header>
                  <div className="grid grid-cols-2 gap-4 my-4">
                    <div className="border-r-2 border-gray-300 pr-4">
                      <p className="text-xs text-gray-500">B√äN G·ª¨I</p>
                      <p className="font-bold">{senderInfo.hoTen || "..."}</p>
                      <p className="text-sm">
                        {senderInfo.soDienThoai || "..."}
                      </p>
                      <p className="text-sm">{senderInfo.diaChi || "..."}</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500">B√äN NH·∫¨N</p>
                      <p className="font-bold">{receiverInfo.hoTen || "..."}</p>
                      <p className="text-sm">
                        {receiverInfo.soDienThoai || "..."}
                      </p>
                      <p className="text-sm">{receiverInfo.diaChi || "..."}</p>
                    </div>
                  </div>
                  <div className="border-t-2 border-b-2 border-black py-2 my-2">
                    <p className="font-bold text-center text-lg">
                      Ti·ªÅn thu h·ªô: {formatCurrency(packageInfo.tienThuHo)}
                    </p>
                  </div>
                  <div>
                    <p className="text-xs text-gray-500">N·ªòI DUNG H√ÄNG H√ìA</p>
                    <p className="font-semibold">
                      {packageInfo.tenSanPham || "Ch∆∞a nh·∫≠p t√™n s·∫£n ph·∫©m"}
                    </p>
                    <p className="text-sm mt-1">
                      KL:{" "}
                      <span className="font-semibold">
                        {packageInfo.khoiLuong} kg
                      </span>{" "}
                      - SL:{" "}
                      <span className="font-semibold">
                        {packageInfo.soLuong}
                      </span>
                    </p>
                  </div>
                  <div className="mt-4 border-t-2 border-gray-300 pt-2">
                    <p className="text-xs text-gray-500">GHI CH√ö</p>
                    <p className="text-sm italic">
                      {packageInfo.ghiChu || "Kh√¥ng c√≥"}
                    </p>
                  </div>
                  <footer className="mt-4 pt-2 text-center text-xs text-gray-500">
                    <p>Ng∆∞·ªùi nh·∫≠n ki·ªÉm tra h√†ng tr∆∞·ªõc khi thanh to√°n.</p>
                    <p>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!</p>
                  </footer>
                </div>

                <div className="mt-6 text-center no-print">
                  <button
                    onClick={handlePrint}
                    className="w-full bg-blue-600 text-white font-bold py-3 px-6 rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-transform transform hover:scale-105"
                  >
                    üñ®Ô∏è In V·∫≠n ƒê∆°n
                  </button>
                </div>
              </div>
            </div>
          </main>
        </div>
      </div>
    </>
  );
}
